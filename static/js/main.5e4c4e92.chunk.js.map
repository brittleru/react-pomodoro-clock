{"version":3,"sources":["logo.svg","components/SetTimer.jsx","components/Header.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SetTimer","props","id","title","toLowerCase","className","onClick","handleDecrease","count","handleIncrease","Header","Footer","audio","document","getElementById","App","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","handlePlayPause","clearInterval","loop","setState","setInterval","play","handleReset","pause","currentTime","handleBreakDecrease","handleBreakIncrease","handleSessionDecrease","handleSessionIncrease","convertToTime","minutes","Math","floor","seconds","undefined","this","breakProps","sessionProps","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e4c4e92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\r\nimport \"./SetTimer.css\";\r\n\r\nconst SetTimer = (props) => {\r\n  const id = props.title.toLowerCase();\r\n\r\n  return (\r\n    <div className=\"timer-container\">\r\n      <h2 id={`${id}-label`}>{props.title} Length</h2>\r\n      <div className=\"flex actions-wrapper\">\r\n        <button id={`${id}-decrement`}\r\n                onClick={props.handleDecrease}\r\n                className=\"btn button-class\">-\r\n        </button>\r\n\r\n        <span id={`${id}-length`}> {props.count} </span>\r\n\r\n        <button id={`${id}-increment`}\r\n                onClick={props.handleIncrease}\r\n                className=\"btn button-class\">+\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SetTimer;\r\n","import React from \"react\"\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => (\r\n  <div className=\"App-header\">\r\n    <h1 className=\"App-title\">React Pomodoro Clock</h1>\r\n  </div>\r\n)\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => (\r\n  <div className=\"App-footer\">\r\n    <p className=\"App-par\">by Mocanu Sebastian</p>\r\n  </div>\r\n)\r\n\r\nexport default Footer;\r\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SetTimer from \"./components/SetTimer\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nconst audio = document.getElementById(\"beep\");\n\nclass App extends React.Component {\n  state = {\n    breakCount: 5,\n    sessionCount: 25,\n    clockCount: 25 * 60,\n    currentTimer: \"Session\",\n    isPlaying: false\n  }\n\n  constructor(props) {\n    super(props);\n    this.loop = undefined;\n  }\n\n\n  componentWillUnmount() {\n    clearInterval(this.loop);\n  }\n\n  handlePlayPause = () => {\n    const { isPlaying } = this.state;\n\n    if(isPlaying) {\n      clearInterval(this.loop);\n      this.setState({\n        isPlaying: false\n      });\n    }\n    else {\n      this.setState({\n        isPlaying: true\n      })\n      this.loop = setInterval(() => {\n        const {clockCount,\n               currentTimer,\n               breakCount,\n               sessionCount} = this.state;\n\n        if(clockCount === 0) {\n          this.setState({\n            currentTimer: (currentTimer === \"Session\") ? \"Break\" : \"Session\",\n            clockCount: (currentTimer === \"Session\") ? (breakCount * 60) : (sessionCount * 60)\n          });\n          audio.play();\n          // console.log(audio.play());\n        }\n        else {\n        this.setState({\n          clockCount: clockCount - 1\n        });\n        }\n      }, 1000);\n    }\n  }\n\n  handleReset = () => {\n    this.setState ({\n      breakCount: 5,\n      sessionCount: 25,\n      clockCount: 25 * 60,\n      currentTimer: \"Session\",\n      isPlaying: false\n    });\n    clearInterval(this.loop);\n\n    audio.pause();\n    audio.currentTime = 0;\n  }\n\n  handleBreakDecrease = () => {\n    const { breakCount, isPlaying, currentTimer } = this.state;\n\n    if (breakCount > 1) {\n      if(!isPlaying && currentTimer === \"Break\") {\n        this.setState({\n          breakCount: breakCount - 1,\n          clockCount: (breakCount - 1) * 60\n        });\n      }\n      else {\n        this.setState({\n          breakCount: breakCount - 1\n        });\n      }\n    }\n  }\n\n  handleBreakIncrease = () => {\n    const { breakCount, isPlaying, currentTimer } = this.state;\n\n    if (breakCount < 60) {\n      if(!isPlaying && currentTimer === \"Break\") {\n        this.setState({\n          breakCount: breakCount + 1,\n          clockCount: (breakCount + 1) * 60\n        });\n      }\n      else {\n        this.setState({\n          breakCount: breakCount + 1\n        });\n      }\n    }\n  }\n\n  handleSessionDecrease = () => {\n    const { sessionCount, isPlaying, currentTimer } = this.state;\n\n    if (sessionCount > 1) {\n      if(!isPlaying && currentTimer === \"Session\") {\n        this.setState({\n          sessionCount: sessionCount - 1,\n          clockCount: (sessionCount - 1) * 60\n        });\n      }\n      else {\n        this.setState({\n          sessionCount: sessionCount - 1\n        });\n      }\n    }\n  }\n\n  handleSessionIncrease = () => {\n    const { sessionCount, isPlaying, currentTimer } = this.state;\n\n    if (sessionCount < 60) {\n      if(!isPlaying && currentTimer === \"Session\") {\n        this.setState({\n          sessionCount: sessionCount + 1,\n          clockCount: (sessionCount + 1) * 60\n        });\n      }\n      else {\n        this.setState({\n          sessionCount: sessionCount + 1\n        });\n      }\n    }\n  }\n\n  convertToTime = (count) => {\n    let minutes = Math.floor(count / 60);\n    let seconds = count % 60;\n    minutes = minutes < 10 ? (\"0\" + minutes) : minutes;\n    seconds = seconds < 10 ? (\"0\" + seconds) : seconds;\n\n    return `${minutes}:${seconds}`;\n  }\n\n\n  render() {\n    const { breakCount,\n            sessionCount,\n            clockCount,\n            currentTimer,\n            isPlaying} = this.state;\n\n    const breakProps = {\n      title: \"Break\",\n      count: breakCount,\n      handleDecrease: this.handleBreakDecrease,\n      handleIncrease: this.handleBreakIncrease\n    };\n\n    const sessionProps = {\n      title: \"Session\",\n      count: sessionCount,\n      handleDecrease: this.handleSessionDecrease,\n      handleIncrease: this.handleSessionIncrease\n    };\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"flex topp\">\n          <SetTimer {...breakProps} />\n          <SetTimer {...sessionProps}/>\n        </div>\n\n        <div className=\"clock-container\">\n          <h2 id=\"timer-label\">{currentTimer}</h2>\n          <span id=\"time-left\">{this.convertToTime(clockCount)}</span>\n\n            <div className=\"flex\">\n            <button onClick={this.handlePlayPause}\n                    className=\"btn button-class\"\n                    id=\"start_stop\">\n              {isPlaying ? 'Stop': 'Play'} {/*<i className={`fas fa-${isPlaying ? 'pause': 'play'}`}*/}\n            </button>\n\n            <button onClick={this.handleReset}\n                    className=\"btn button-class\"\n                    id=\"reset\">\n              {\"Reset\"}\n            </button>\n          </div>\n\n\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}